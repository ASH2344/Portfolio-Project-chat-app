{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport appApi from \"../services/appApi\";\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    newMessages: {} // Initialize newMessages as an empty object\n\n  },\n  // reducers: {\n  //     addNotifications: (state, { payload }) => {\n  //         if (state.newMessages[payload]) {\n  //             state.newMessages[payload] = state.newMessages[payload] + 1;\n  //         } else {\n  //             state.newMessages[payload] = 1;\n  //         }\n  //     },\n  //     resetNotifications: (state, { payload }) => {\n  //         delete state.newMessages[payload];\n  //     },\n  // },\n  extraReducers: builder => {\n    // save user after signup\n    builder.addMatcher(appApi.endpoints.signupUser.matchFulfilled, (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      return payload;\n    }); // save user after login\n\n    builder.addMatcher(appApi.endpoints.loginUser.matchFulfilled, (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      return payload;\n    }); // logout: destroy user session\n\n    builder.addMatcher(appApi.endpoints.logoutUser.matchFulfilled, () => null);\n  }\n});\nexport const {\n  addNotifications,\n  resetNotifications\n} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"sources":["C:/Users/USER/Portfolio-project-real-time-chaat-app/frontend/src/features/userSlice.js"],"names":["createSlice","appApi","userSlice","name","initialState","newMessages","extraReducers","builder","addMatcher","endpoints","signupUser","matchFulfilled","state","payload","loginUser","logoutUser","addNotifications","resetNotifications","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AAEA,OAAO,MAAMC,SAAS,GAAGF,WAAW,CAAC;AACjCG,EAAAA,IAAI,EAAE,MAD2B;AAEjCC,EAAAA,YAAY,EAAE;AACVC,IAAAA,WAAW,EAAE,EADH,CACM;;AADN,GAFmB;AAKjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AACxB;AACAA,IAAAA,OAAO,CAACC,UAAR,CAAmBP,MAAM,CAACQ,SAAP,CAAiBC,UAAjB,CAA4BC,cAA/C,EAA+D,CAACC,KAAD;AAAA,UAAQ;AAAEC,QAAAA;AAAF,OAAR;AAAA,aAAwBA,OAAxB;AAAA,KAA/D,EAFwB,CAGxB;;AACAN,IAAAA,OAAO,CAACC,UAAR,CAAmBP,MAAM,CAACQ,SAAP,CAAiBK,SAAjB,CAA2BH,cAA9C,EAA8D,CAACC,KAAD;AAAA,UAAQ;AAAEC,QAAAA;AAAF,OAAR;AAAA,aAAwBA,OAAxB;AAAA,KAA9D,EAJwB,CAKxB;;AACAN,IAAAA,OAAO,CAACC,UAAR,CAAmBP,MAAM,CAACQ,SAAP,CAAiBM,UAAjB,CAA4BJ,cAA/C,EAA+D,MAAM,IAArE;AACH;AAzBgC,CAAD,CAA7B;AA4BP,OAAO,MAAM;AAAEK,EAAAA,gBAAF;AAAoBC,EAAAA;AAApB,IAA2Cf,SAAS,CAACgB,OAA3D;AACP,eAAehB,SAAS,CAACiB,OAAzB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport appApi from \"../services/appApi\";\n\nexport const userSlice = createSlice({\n    name: \"user\",\n    initialState: {\n        newMessages: {} // Initialize newMessages as an empty object\n    },\n    // reducers: {\n    //     addNotifications: (state, { payload }) => {\n    //         if (state.newMessages[payload]) {\n    //             state.newMessages[payload] = state.newMessages[payload] + 1;\n    //         } else {\n    //             state.newMessages[payload] = 1;\n    //         }\n    //     },\n    //     resetNotifications: (state, { payload }) => {\n    //         delete state.newMessages[payload];\n    //     },\n    // },\n\n    extraReducers: (builder) => {\n        // save user after signup\n        builder.addMatcher(appApi.endpoints.signupUser.matchFulfilled, (state, { payload }) => payload);\n        // save user after login\n        builder.addMatcher(appApi.endpoints.loginUser.matchFulfilled, (state, { payload }) => payload);\n        // logout: destroy user session\n        builder.addMatcher(appApi.endpoints.logoutUser.matchFulfilled, () => null);\n    },\n});\n\nexport const { addNotifications, resetNotifications } = userSlice.actions;\nexport default userSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}