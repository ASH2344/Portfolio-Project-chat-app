{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport appApi from \"../services/appApi\";\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    newMessages: {} // Initialize newMessages as an empty object\n\n  },\n  reducers: {\n    addNotifications: (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n\n      if (state.newMessages[payload]) {\n        state.newMessages[payload] = state.newMessages[payload] + 1;\n      } else {\n        state.newMessages[payload] = 1;\n      }\n    },\n    resetNotifications: (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n\n      if (state.newMessages[payload] !== undefined && state.newMessages[payload] !== null) {\n        const {\n          [payload]: _,\n          ...rest\n        } = state.newMessages;\n        state.newMessages = rest;\n      }\n    },\n    extraReducers: builder => {\n      // save user after signup\n      builder.addMatcher(appApi.endpoints.signupUser.matchFulfilled, (state, _ref3) => {\n        let {\n          payload\n        } = _ref3;\n        return payload;\n      }); // save user after login\n\n      builder.addMatcher(appApi.endpoints.loginUser.matchFulfilled, (state, _ref4) => {\n        let {\n          payload\n        } = _ref4;\n        return payload;\n      }); // logout: destroy user session\n\n      builder.addMatcher(appApi.endpoints.logoutUser.matchFulfilled, () => null);\n    }\n  }\n});\nexport const {\n  addNotifications,\n  resetNotifications\n} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"sources":["C:/Users/USER/Portfolio-project-real-time-chaat-app/frontend/src/features/userSlice.js"],"names":["createSlice","appApi","userSlice","name","initialState","newMessages","reducers","addNotifications","state","payload","resetNotifications","undefined","_","rest","extraReducers","builder","addMatcher","endpoints","signupUser","matchFulfilled","loginUser","logoutUser","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AAEA,OAAO,MAAMC,SAAS,GAAGF,WAAW,CAAC;AACjCG,EAAAA,IAAI,EAAE,MAD2B;AAEjCC,EAAAA,YAAY,EAAE;AACVC,IAAAA,WAAW,EAAE,EADH,CACM;;AADN,GAFmB;AAKjCC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,gBAAgB,EAAE,CAACC,KAAD,WAAwB;AAAA,UAAhB;AAAEC,QAAAA;AAAF,OAAgB;;AACtC,UAAID,KAAK,CAACH,WAAN,CAAkBI,OAAlB,CAAJ,EAAgC;AAC5BD,QAAAA,KAAK,CAACH,WAAN,CAAkBI,OAAlB,IAA6BD,KAAK,CAACH,WAAN,CAAkBI,OAAlB,IAA6B,CAA1D;AACH,OAFD,MAEO;AACHD,QAAAA,KAAK,CAACH,WAAN,CAAkBI,OAAlB,IAA6B,CAA7B;AACH;AACJ,KAPK;AAQNC,IAAAA,kBAAkB,EAAE,CAACF,KAAD,YAAwB;AAAA,UAAhB;AAAEC,QAAAA;AAAF,OAAgB;;AACxC,UAAID,KAAK,CAACH,WAAN,CAAkBI,OAAlB,MAA+BE,SAA/B,IAA4CH,KAAK,CAACH,WAAN,CAAkBI,OAAlB,MAA+B,IAA/E,EAAqF;AACjF,cAAM;AAAE,WAACA,OAAD,GAAWG,CAAb;AAAgB,aAAGC;AAAnB,YAA4BL,KAAK,CAACH,WAAxC;AACAG,QAAAA,KAAK,CAACH,WAAN,GAAoBQ,IAApB;AACH;AACR,KAbS;AAeVC,IAAAA,aAAa,EAAGC,OAAD,IAAa;AACxB;AACAA,MAAAA,OAAO,CAACC,UAAR,CAAmBf,MAAM,CAACgB,SAAP,CAAiBC,UAAjB,CAA4BC,cAA/C,EAA+D,CAACX,KAAD;AAAA,YAAQ;AAAEC,UAAAA;AAAF,SAAR;AAAA,eAAwBA,OAAxB;AAAA,OAA/D,EAFwB,CAGxB;;AACAM,MAAAA,OAAO,CAACC,UAAR,CAAmBf,MAAM,CAACgB,SAAP,CAAiBG,SAAjB,CAA2BD,cAA9C,EAA8D,CAACX,KAAD;AAAA,YAAQ;AAAEC,UAAAA;AAAF,SAAR;AAAA,eAAwBA,OAAxB;AAAA,OAA9D,EAJwB,CAKxB;;AACAM,MAAAA,OAAO,CAACC,UAAR,CAAmBf,MAAM,CAACgB,SAAP,CAAiBI,UAAjB,CAA4BF,cAA/C,EAA+D,MAAM,IAArE;AACH;AAtBS;AALuB,CAAD,CAA7B;AA8BP,OAAO,MAAM;AAAEZ,EAAAA,gBAAF;AAAoBG,EAAAA;AAApB,IAA2CR,SAAS,CAACoB,OAA3D;AACP,eAAepB,SAAS,CAACqB,OAAzB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport appApi from \"../services/appApi\";\n\nexport const userSlice = createSlice({\n    name: \"user\",\n    initialState: {\n        newMessages: {} // Initialize newMessages as an empty object\n    },\n    reducers: {\n        addNotifications: (state, { payload }) => {\n            if (state.newMessages[payload]) {\n                state.newMessages[payload] = state.newMessages[payload] + 1;\n            } else {\n                state.newMessages[payload] = 1;\n            }\n        },\n        resetNotifications: (state, { payload }) => {\n            if (state.newMessages[payload] !== undefined && state.newMessages[payload] !== null) {\n                const { [payload]: _, ...rest } = state.newMessages;\n                state.newMessages = rest;\n            }\n    },\n\n    extraReducers: (builder) => {\n        // save user after signup\n        builder.addMatcher(appApi.endpoints.signupUser.matchFulfilled, (state, { payload }) => payload);\n        // save user after login\n        builder.addMatcher(appApi.endpoints.loginUser.matchFulfilled, (state, { payload }) => payload);\n        // logout: destroy user session\n        builder.addMatcher(appApi.endpoints.logoutUser.matchFulfilled, () => null);\n    },\n}});\n\nexport const { addNotifications, resetNotifications } = userSlice.actions;\nexport default userSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}