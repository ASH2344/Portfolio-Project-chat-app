{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Portfolio-project-real-time-chaat-app\\\\frontend\\\\src\\\\context\\\\appContext.js\",\n    _s = $RefreshSig$();\n\n// import { io } from \"socket.io-client\";\n// import React from \"react\";\n// const SOCKET_URL = \"http://localhost:5000\";\n// export const socket = io(SOCKET_URL);\n// // app context\n// export const AppContext = React.createContext();\nimport { io } from \"socket.io-client\";\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SOCKET_URL = \"http://localhost:5000\";\nexport const AppContext = /*#__PURE__*/React.createContext();\n\nfunction App() {\n  _s();\n\n  const [socket, setSocket] = useState(null);\n  useEffect(() => {\n    // Initialize socket connection after the component is mounted\n    const newSocket = io(SOCKET_URL);\n    setSocket(newSocket); // Clean up the socket connection when the component is unmounted\n\n    return () => {\n      newSocket.disconnect();\n    };\n  }, []); // Empty dependency array ensures the effect runs once after the initial render\n\n  const contextValue = {\n    socket // ... other context values\n\n  };\n\n  if (!socket) {\n    // If socket is not initialized yet, you can render a loading state or null\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: contextValue\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"NvwYO9vJOwIMt5STdlMKfWhuxZw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/USER/Portfolio-project-real-time-chaat-app/frontend/src/context/appContext.js"],"names":["io","React","useEffect","useState","SOCKET_URL","AppContext","createContext","App","socket","setSocket","newSocket","disconnect","contextValue"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,EAAT,QAAmB,kBAAnB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;AAEA,MAAMC,UAAU,GAAG,uBAAnB;AAEA,OAAO,MAAMC,UAAU,gBAAGJ,KAAK,CAACK,aAAN,EAAnB;;AAEP,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,IAAD,CAApC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMQ,SAAS,GAAGV,EAAE,CAACI,UAAD,CAApB;AACAK,IAAAA,SAAS,CAACC,SAAD,CAAT,CAHc,CAKd;;AACA,WAAO,MAAM;AACXA,MAAAA,SAAS,CAACC,UAAV;AACD,KAFD;AAGD,GATQ,EASN,EATM,CAAT,CAHa,CAYL;;AAER,QAAMC,YAAY,GAAG;AACnBJ,IAAAA,MADmB,CAEnB;;AAFmB,GAArB;;AAKA,MAAI,CAACA,MAAL,EAAa;AACX;AACA,WAAO,IAAP;AACD;;AAED,sBACE,QAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAAEI;AAA5B;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GA7BQL,G;;KAAAA,G;AA+BT,eAAeA,GAAf","sourcesContent":["// import { io } from \"socket.io-client\";\n// import React from \"react\";\n// const SOCKET_URL = \"http://localhost:5000\";\n// export const socket = io(SOCKET_URL);\n// // app context\n// export const AppContext = React.createContext();\nimport { io } from \"socket.io-client\";\nimport React, { useEffect, useState } from \"react\";\n\nconst SOCKET_URL = \"http://localhost:5000\";\n\nexport const AppContext = React.createContext();\n\nfunction App() {\n  const [socket, setSocket] = useState(null);\n\n  useEffect(() => {\n    // Initialize socket connection after the component is mounted\n    const newSocket = io(SOCKET_URL);\n    setSocket(newSocket);\n\n    // Clean up the socket connection when the component is unmounted\n    return () => {\n      newSocket.disconnect();\n    };\n  }, []); // Empty dependency array ensures the effect runs once after the initial render\n\n  const contextValue = {\n    socket,\n    // ... other context values\n  };\n\n  if (!socket) {\n    // If socket is not initialized yet, you can render a loading state or null\n    return null;\n  }\n\n  return (\n    <AppContext.Provider value={contextValue}>\n      {/* Rest of your component */}\n    </AppContext.Provider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}